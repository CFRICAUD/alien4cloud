package alien4cloud.it.csars;

import java.io.IOException;
import java.util.List;

import org.junit.Assert;
import org.junit.Test;

import alien4cloud.it.Context;
import alien4cloud.rest.csar.CreateCsarGithubRequest;
import alien4cloud.rest.utils.JsonUtil;
import alien4cloud.security.model.CsarGitCheckoutLocation;
import alien4cloud.security.model.CsarGitRepository;

import com.fasterxml.jackson.core.JsonProcessingException;

import cucumber.api.java.en.And;
import cucumber.api.java.en.Given;
import cucumber.api.java.en.Then;
import cucumber.api.java.en.When;

public class CsarGitCRUDStepDefinition {
    private CsarGitRepository CSAR_GITHUB_REPOSITORY;
    
    @Given("I have a csargit with the url \"([^\"]*)\" with username \"([^\"]*)\" and password \"([^\"]*)\"$")
    public void I_Create_a_new_csargit(String id, String url, String username, String password)
            throws JsonProcessingException, IOException {
        CSAR_GITHUB_REPOSITORY = new CsarGitRepository();
        CSAR_GITHUB_REPOSITORY.setPassword(password);
        CSAR_GITHUB_REPOSITORY.setUsername(username);
        CSAR_GITHUB_REPOSITORY.setRepositoryUrl(url);
    }

    @Given("^I add locations to the csar$")
    public void the_price_list_for_an_international_coffee_shop(List<CsarGitCheckoutLocation> locations) throws Throwable {
        CSAR_GITHUB_REPOSITORY.setImportLocations(locations);
    }
    
    @When("I create a csargit")
    public void I_Create_a_new_Csar_From_Git() throws Throwable {
        CreateCsarGithubRequest request = new CreateCsarGithubRequest(CSAR_GITHUB_REPOSITORY.getRepositoryUrl(), CSAR_GITHUB_REPOSITORY.getUsername(),
                CSAR_GITHUB_REPOSITORY.getPassword(), CSAR_GITHUB_REPOSITORY.getImportLocations());
        Context.getInstance().registerRestResponse(Context.getRestClientInstance().postJSon("/rest/csarsgit/", JsonUtil.toString(request)));
    }

    @Then("I should received a response with the auto-generated id")
    public void I_should_received_a_response_with_the_autogenerated_id(String id) throws Throwable {
        String response = JsonUtil.read(Context.getInstance().getRestResponse(), String.class).getData();
        Assert.assertNull(response);
    }

    @And("csargit should have the same id as the response id")
    public void Csargit_should_have_the_same_id_as_the_response_id(String id, String url) throws Throwable {
        Assert.assertSame(CSAR_GITHUB_REPOSITORY.getId(), JsonUtil.read(Context.getInstance().getRestResponse(), String.class).getData());
    }

//    @Test
//    public boolean I_have_a_csar_from_git_created_with_id(String id) throws Throwable {
//        Context.getInstance().registerRestResponse(Context.getRestClientInstance().get("/rest/csarsgit/" + id));
//        CsarGitRepository csargit = JsonUtil.read(Context.getInstance().getRestResponse(), CsarGitRepository.class).getData();
//        if (csargit == null) {
//            return false;
//        }
//        Assert.assertNotNull(csargit);
//        Assert.assertEquals(csargit.getId(), id);
//        return true;
//    }
}
